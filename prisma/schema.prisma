datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}
// -- User Model -- //
model User {
  id          Int      @id @default(autoincrement())
  email       String   @unique
  password    String
  firstName   String?
  lastName    String?
  profileImage String?
  age         Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  role UserRole? @default(client)

  messages Message[]
  sex String?
  bodyInfo    BodyInfo?  @relation 
  workoutProgram WorkoutProgram[] @relation()
  favorites Favorite[]
  
  @@index([email])
}

// -- Body Info Model -- //
model BodyInfo {
  id        Int      @id @default(autoincrement())
  userId    Int @unique
  user      User     @relation(fields: [userId], references: [id]) 
  height    Int
  weight    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt 

  drinkRecords DrinkRecord[]

  @@index([userId]) 
}

// -- Workout Program Model -- //
model WorkoutProgram {
  id String @id @default(cuid())
  
  currentAge        Int
  currentWeight     Float
  currentHeight     Float
  fatPercentage     Float
  goalWeight        Float
  goalHeight        Float
  goalFatPercentage Float

  title             String
  notes             String
  weekSessions      Int
  isPrivate         Boolean
  
  gender            Gender
  workoutGoal       WorkoutGoal
  userId            Int
  user              User  @relation(fields: [userId], references: [id])
  programStart      DateTime @default(now())
  programEnd        DateTime?
  exercises         WorkoutExercise[] @relation("WorkoutProgramExercises")

}

// -- Exercise Model -- //
model Exercise {
  id String @id @default(uuid())
  name String
  difficulty Difficulty
  muscleGroup MuscleGroup
  createdAt DateTime @default(now())

  workoutPrograms WorkoutExercise[] @relation("WorkoutExerciseToExercise")

}

model WorkoutExercise {
  id               Int       @id @default(autoincrement())
  workoutProgramId String
  exerciseId       String
  sets             Int
  reps             Int
  restTime         Int
  workoutProgram   WorkoutProgram @relation("WorkoutProgramExercises", fields: [workoutProgramId], references: [id])
  exercise         Exercise        @relation("WorkoutExerciseToExercise", fields: [exerciseId], references: [id])
}

model Favorite {
  id String @id @default(cuid())
  userId Int
  user User @relation(fields: [userId], references: [id])
  entityId String
  type FavoriteType
}

model DrinkRecord {
  id         String   @id @default(cuid())
  bodyInfoId Int
  bodyInfo   BodyInfo @relation(fields: [bodyInfoId], references: [id])
  date       DateTime @default(now()) 
  amountMl     Float    
  drinkType DrinkType
  comment String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@unique([bodyInfoId, date]) 
}
model Message {
  id        Int      @id @default(autoincrement()) 
  text      String
  sender    User     @relation(fields: [senderId], references: [id])
  senderId  Int
  createdAt DateTime @default(now())
}


// -- Enums
enum FavoriteType {
  EXERCISE
  WORKOUT_PROGRAM
}

enum Gender {
  Male
  Female
}

enum WorkoutGoal {
  muscleGain
  fat_loss
  maintenance
  strength_development
  cardio
}

enum UserRole {
  client
  admin
  coach
}

enum MuscleGroup {
  CHEST      
  BACK       
  LEGS       
  ARMS       
  SHOULDERS  
  CORE       
  CARDIO     
}
enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum DrinkType {
  WATER
  COFFEE
  TEA
}